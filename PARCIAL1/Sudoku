import java.io.*;
import java.util.Random;
import java.util.Scanner;

class Juego {
    protected int[][] board; // Tablero base
    protected StringBuilder movimientos;

    public Juego() {
        board = new int[9][9]; // Inicializa el tablero
        movimientos = new StringBuilder();
    }

    public void printBoard() {
        for (int i = 0; i < 9; i++) {
            if (i % 3 == 0 && i != 0) {
                System.out.println("---------------------");
            }
            for (int j = 0; j < 9; j++) {
                if (j % 3 == 0 && j != 0) {
                    System.out.print("| ");
                }
                System.out.print(board[i][j] != 0 ? board[i][j] + " " : ". ");
            }
            System.out.println();
        }
    }

    public boolean isValid(int num, int row, int col) {
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == num || board[i][col] == num) {
                return false;
            }
        }
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = startRow; i < startRow + 3; i++) {
            for (int j = startCol; j < startCol + 3; j++) {
                if (board[i][j] == num) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean solve() {
        int[] empty = findEmpty();
        if (empty == null) {
            return true; // No hay celdas vacías, el Sudoku está resuelto
        }
        int row = empty[0], col = empty[1];
        for (int num = 1; num <= 9; num++) {
            if (isValid(num, row, col)) {
                board[row][col] = num;
                if (solve()) {
                    return true;
                }
                board[row][col] = 0; // Backtracking
            }
        }
        return false;
    }

    public int[] findEmpty() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == 0) {
                    return new int[]{i, j};
                }
            }
        }
        return null;
    }

    public void generatePuzzle(int minClues, int maxClues, int desiredClues) {
        if (desiredClues < minClues || desiredClues > maxClues) {
            throw new IllegalArgumentException("La cantidad de pistas debe estar entre " + minClues + " y " + maxClues);
        }
        solve(); // Resuelve el Sudoku primero
        Random rand = new Random();
        int cluesToKeep = desiredClues;
        int cluesToRemove = 81 - cluesToKeep;

        while (cluesToRemove > 0) {
            int row = rand.nextInt(9);
            int col = rand.nextInt(9);
            if (board[row][col] != 0) {
                board[row][col] = 0;
                cluesToRemove--;
            }
        }
    }

    public void inputBoard(int clues) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Ingrese el tablero de Sudoku (9 números por fila, use 0 para celdas vacías):");
        for (int i = 0; i < 9; i++) {
            System.out.printf("Fila %d: ", i + 1);
            for (int j = 0; j < 9; j++) {
                board[i][j] = scanner.nextInt();
            }
        }
    }

    public void verificarCompletados() {
        // Verificación de filas completas
        for (int i = 0; i < 9; i++) {
            boolean filaValida = true;
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == 0) {
                    filaValida = false;
                    break;
                }
            }
            if (filaValida) {
                System.out.println("Fila " + (i + 1) + " completada.");
            }
        }
    }

    public void guardarPartida() {
        try (PrintWriter writer = new PrintWriter(new FileWriter("sudoku_partida_guardada.txt"))) {
            writer.println(movimientos.toString());
            System.out.println("Partida guardada correctamente.");
        } catch (IOException e) {
            System.out.println("Error al guardar la partida.");
        }
    }

    public void reproducirPartida() {
        try (BufferedReader reader = new BufferedReader(new FileReader("sudoku_partida_guardada.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println("Error al reproducir la partida.");
        }
    }

    public boolean verificarFilaCompleta(int fila) {
        for (int num = 1; num <= 9; num++) {
            boolean encontrado = false;
            for (int col = 0; col < 9; col++) {
                if (board[fila][col] == num) {
                    encontrado = true;
                    break;
                }
            }
            if (!encontrado) {
                return false; // Fila no completa
            }
        }
        return true; // Fila completa
    }

    public void actualizarTablero() {
        for (int i = 0; i < 9; i++) {
            if (verificarFilaCompleta(i)) {
                System.out.println("Fila " + (i + 1) + " completada.");
                printBoard(); // Muestra el tablero actualizado
            }
        }
    }
}

public class Sudoku extends Juego {
    public static void main(String[] args) {
        Sudoku juego = new Sudoku();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Para salir en cualquier momento, ingrese -1 cuando se le pida un número.");

        while (true) {
            System.out.println("Seleccione una opción:");
            System.out.println("1. Jugar Sudoku (generar nuevo)");
            System.out.println("2. Ingresar tablero manualmente");
            System.out.println("3. Guardar partida");
            System.out.println("4. Reproducir última partida");
            System.out.println("5. Salir");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Limpiar el buffer después del nextInt()

            switch (choice) {
                case 1:
                    System.out.println("Ingrese cantidad de pistas (9-21):");
                    int cluesGen = scanner.nextInt();
                    juego.generatePuzzle(9, 21, cluesGen);
                    juego.printBoard();
                    juego.verificarCompletados();
                    juego.jugar(scanner);
                    break;
                case 2:
                    System.out.println("Ingrese cantidad de pistas (9-21):");
                    int cluesManual = scanner.nextInt();
                    juego.inputBoard(cluesManual);
                    juego.printBoard();
                    juego.verificarCompletados();
                    System.out.println("¿Desea jugar el tablero? (1: Sí, 2: Ver solución)");
                    int playChoice = scanner.nextInt();
                    if (playChoice == 2) {
                        System.out.println("Aquí está la solución:");
                        juego.solve();
                        juego.printBoard();
                        break;
                    }
                    juego.jugar(scanner);
                    break;
                case 3:
                    juego.guardarPartida();
                    break;
                case 4:
                    juego.reproducirPartida();
                    break;
                case 5:
                    System.out.println("Gracias por jugar.");
                    return;
                default:
                    System.out.println("Opción no válida.");
                    break;
            }
        }
    }

    private void jugar(Scanner scanner) {
        int attempts = 0;
        while (true) {
            int[] empty = findEmpty();
            if (empty == null) {
                System.out.println("¡Felicitaciones! Has completado el Sudoku.");
                break;
            }
            int row = empty[0], col = empty[1];
            System.out.printf("Ingrese un número para la posición fila %d, columna %d: ", row + 1, col + 1);
            int num = scanner.nextInt();

            if (num == -1) {
                System.out.println("Has salido del juego. Puedes volver a cargar la partida más tarde.");
                return;
            }

            if (num < 1 || num > 9) {
                System.out.println("Número inválido. Debe ser entre 1 y 9.");
                movimientos.append("Error: Número inválido en fila ").append(row + 1).append(", columna ").append(col + 1).append("\n");
                continue;
            }

            if (!isValid(num, row, col)) {
                System.out.println("Movimiento inválido, intenta de nuevo.");
                movimientos.append("Error: Movimiento inválido en fila ").append(row + 1).append(", columna ").append(col + 1).append("\n");
                attempts++;
                continue;
            }

            board[row][col] = num;
            movimientos.append("Movimiento válido: número ").append(num).append(" en fila ").append(row + 1).append(", columna ").append(col + 1).append("\n");

            printBoard();
            actualizarTablero(); // Muestra el tablero actualizado si se completan filas

            attempts++;
        }
    }
}
