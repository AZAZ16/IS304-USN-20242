import java.io.*;
import java.util.Random;
import java.util.Scanner;

class Juego {
    protected int[][] board; // Tablero base
    protected StringBuilder movimientos;

    public Juego() {
        board = new int[9][9]; // Inicializa el tablero
        movimientos = new StringBuilder();
    }

    public void printBoard() {
        for (int i = 0; i < 9; i++) {
            if (i % 3 == 0 && i != 0) {
                System.out.println("---------------------");
            }
            for (int j = 0; j < 9; j++) {
                if (j % 3 == 0 && j != 0) {
                    System.out.print("| ");
                }
                System.out.print(board[i][j] != 0 ? board[i][j] + " " : ". ");
            }
            System.out.println();
        }
    }

    public boolean isValid(int num, int row, int col) {
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == num || board[i][col] == num) {
                return false;
            }
        }
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = startRow; i < startRow + 3; i++) {
            for (int j = startCol; j < startCol + 3; j++) {
                if (board[i][j] == num) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean solve() {
        int[] empty = findEmpty();
        if (empty == null) {
            return true; // No hay celdas vacías, el Sudoku está resuelto
        }
        int row = empty[0], col = empty[1];
        for (int num = 1; num <= 9; num++) {
            if (isValid(num, row, col)) {
                board[row][col] = num;
                if (solve()) {
                    return true;
                }
                board[row][col] = 0; // Backtracking
            }
        }
        return false;
    }

    public int[] findEmpty() {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == 0) {
                    return new int[]{i, j};
                }
            }
        }
        return null;
    }

    public void generatePuzzle(int minClues, int maxClues, int desiredClues) {
        if (desiredClues < minClues || desiredClues > maxClues) {
            throw new IllegalArgumentException("La cantidad de pistas debe estar entre " + minClues + " y " + maxClues);
        }
        solve(); // Resuelve el Sudoku primero
        Random rand = new Random();
        int cluesToKeep = desiredClues; // Cambiar a usar las pistas deseadas
        int cluesToRemove = 81 - cluesToKeep;

        while (cluesToRemove > 0) {
            int row = rand.nextInt(9);
            int col = rand.nextInt(9);
            if (board[row][col] != 0) {
                board[row][col] = 0;
                cluesToRemove--;
            }
        }
    }

    public void inputBoard(int clues) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Ingrese el tablero de Sudoku (9 números por fila, use 0 para celdas vacías):");
        for (int i = 0; i < 9; i++) {
            System.out.printf("Fila %d: ", i + 1);
            for (int j = 0; j < 9; j++) {
                board[i][j] = scanner.nextInt();
            }
        }
        // Aseguramos que se mantenga la cantidad de pistas deseadas.
        Random rand = new Random();
        while (clues > 0) {
            int row = rand.nextInt(9);
            int col = rand.nextInt(9);
            if (board[row][col] != 0) {
                clues--;
            }
        }
    }

    public void verificarCompletados() {
        boolean filaCompleta = false;
        boolean columnaCompleta = false;
        boolean cuadroCompleto = false;

        // Verificación de filas completas
        for (int i = 0; i < 9; i++) {
            boolean filaValida = true;
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == 0) {
                    filaValida = false;
                    break;
                }
            }
            if (filaValida) {
                filaCompleta = true;
                System.out.println("Fila " + (i + 1) + " completada.");
            }
        }

        // Verificación de columnas completas
        for (int i = 0; i < 9; i++) {
            boolean columnaValida = true;
            for (int j = 0; j < 9; j++) {
                if (board[j][i] == 0) {
                    columnaValida = false;
                    break;
                }
            }
            if (columnaValida) {
                columnaCompleta = true;
                System.out.println("Columna " + (i + 1) + " completada.");
            }
        }

        // Verificación de cuadros 3x3 completos
        for (int i = 0; i < 9; i += 3) {
            for (int j = 0; j < 9; j += 3) {
                boolean cuadroValido = true;
                for (int r = i; r < i + 3; r++) {
                    for (int c = j; c < j + 3; c++) {
                        if (board[r][c] == 0) {
                            cuadroValido = false;
                            break;
                        }
                    }
                }
                if (cuadroValido) {
                    cuadroCompleto = true;
                    System.out.println("Cuadro 3x3 completado.");
                }
            }
        }
    }

    public void guardarPartida() {
        try (PrintWriter writer = new PrintWriter(new FileWriter("sudoku_partida.txt"))) {
            // Guardar el tablero
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    writer.print(board[i][j] + " ");
                }
                writer.println();
            }
            writer.println(movimientos.toString());
            System.out.println("Partida guardada correctamente.");
        } catch (IOException e) {
            System.out.println("Error al guardar la partida.");
        }
    }

    public void reproducirPartida() {
        try (BufferedReader reader = new BufferedReader(new FileReader("sudoku_partida.txt"))) {
            String line;
            int row = 0;

            // Cargar el tablero
            while ((line = reader.readLine()) != null && row < 9) {
                String[] numbers = line.split(" ");
                for (int col = 0; col < 9; col++) {
                    board[row][col] = Integer.parseInt(numbers[col]);
                }
                row++;
            }

            // Cargar los movimientos (si es necesario)
            StringBuilder loadedMovimientos = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                loadedMovimientos.append(line).append("\n");
            }
            movimientos = loadedMovimientos;

            System.out.println("Partida reproducida correctamente.");
            printBoard();
            jugar(new Scanner(System.in)); // Permitir jugar después de cargar
        } catch (IOException e) {
            System.out.println("Error al reproducir la partida.");
        }
    }

    public void jugar(Scanner scanner) {
        int attempts = 0;
        while (true) {
            int[] empty = findEmpty();
            if (empty == null) {
                System.out.println("¡Felicitaciones! Has completado el Sudoku.");
                break;
            }
            int row = empty[0], col = empty[1];
            System.out.printf("Ingrese un número para la posición fila %d, columna %d: ", row + 1, col + 1);
            int num = scanner.nextInt();

            if (num == -1) { // Opción para salir del juego
                System.out.println("Has salido del juego. Puedes volver a cargar la partida más tarde.");
                return;
            }

            if (isValid(num, row, col)) {
                board[row][col] = num;
                movimientos.append("Fila ").append(row + 1).append(", Columna ").append(col + 1).append(": ").append(num).append("\n");
                attempts = 0; // Resetea el contador de intentos
            } else {
                System.out.println("Número inválido. Intenta de nuevo.");
                attempts++;
                if (attempts >= 3) {
                    System.out.println("¡Has perdido! Aquí está la solución:");
                    solve(); // Resuelve el Sudoku
                    printBoard(); // Muestra la solución
                    break;
                }
            }
            printBoard();
        }
    }
}

public class Sudoku extends Juego {
    public static void main(String[] args) {
        Sudoku juego = new Sudoku();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Seleccione una opción:");
            System.out.println("1. Jugar Sudoku (generar nuevo)");
            System.out.println("2. Ingresar tablero manualmente");
            System.out.println("3. Guardar partida");
            System.out.println("4. Reproducir última partida");
            System.out.println("5. Salir");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Limpiar el buffer después del nextInt()

            switch (choice) {
                case 1:
                    System.out.println("Ingrese cantidad de pistas (9-21):");
                    int cluesGen = scanner.nextInt();
                    juego.generatePuzzle(9, 21, cluesGen);
                    juego.printBoard();
                    juego.verificarCompletados();
                    juego.jugar(scanner);
                    break;
                case 2:
                    System.out.println("Ingrese cantidad de pistas (9-21):");
                    int cluesManual = scanner.nextInt();
                    juego.inputBoard(cluesManual);
                    juego.printBoard();
                    juego.verificarCompletados();
                    System.out.println("¿Desea jugar el tablero? (1: Sí, 2: No)");
                    int playChoice = scanner.nextInt();
                    if (playChoice == 1) {
                        juego.jugar(scanner);
                    }
                    break;
                case 3:
                    juego.guardarPartida();
                    break;
                case 4:
                    juego.reproducirPartida();
                    break;
                case 5:
                    System.out.println("Gracias por jugar.");
                    return;
                default:
                    System.out.println("Opción no válida.");
                    break;
            }
        }
    }
}
